// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package contributor

import (
	"context"
	"sync"
)

var (
	lockRepositoryMockFindByLocation sync.RWMutex
)

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             FindByLocationFunc: func(ctx context.Context, location string, limit int, sortBy string) ([]Contributor, error) {
// 	               panic("TODO: mock out the FindByLocation method")
//             },
//         }
//
//         // TODO: use mockedRepository in code that requires Repository
//         //       and then make assertions.
//
//     }
type RepositoryMock struct {
	// FindByLocationFunc mocks the FindByLocation method.
	FindByLocationFunc func(ctx context.Context, location string, limit int, sortBy string) ([]Contributor, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindByLocation holds details about calls to the FindByLocation method.
		FindByLocation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Location is the location argument value.
			Location string
			// Limit is the limit argument value.
			Limit int
			// SortBy is the sortBy argument value.
			SortBy string
		}
	}
}

// FindByLocation calls FindByLocationFunc.
func (mock *RepositoryMock) FindByLocation(ctx context.Context, location string, limit int, sortBy string) ([]Contributor, error) {
	if mock.FindByLocationFunc == nil {
		panic("moq: RepositoryMock.FindByLocationFunc is nil but Repository.FindByLocation was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Location string
		Limit    int
		SortBy   string
	}{
		Ctx:      ctx,
		Location: location,
		Limit:    limit,
		SortBy:   sortBy,
	}
	lockRepositoryMockFindByLocation.Lock()
	mock.calls.FindByLocation = append(mock.calls.FindByLocation, callInfo)
	lockRepositoryMockFindByLocation.Unlock()
	return mock.FindByLocationFunc(ctx, location, limit, sortBy)
}

// FindByLocationCalls gets all the calls that were made to FindByLocation.
// Check the length with:
//     len(mockedRepository.FindByLocationCalls())
func (mock *RepositoryMock) FindByLocationCalls() []struct {
	Ctx      context.Context
	Location string
	Limit    int
	SortBy   string
} {
	var calls []struct {
		Ctx      context.Context
		Location string
		Limit    int
		SortBy   string
	}
	lockRepositoryMockFindByLocation.RLock()
	calls = mock.calls.FindByLocation
	lockRepositoryMockFindByLocation.RUnlock()
	return calls
}
