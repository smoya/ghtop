// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package logx

import (
	"sync"
)

var (
	lockMarshalerMockMarshal sync.RWMutex
)

// MarshalerMock is a mock implementation of Marshaler.
//
//     func TestSomethingThatUsesMarshaler(t *testing.T) {
//
//         // make and configure a mocked Marshaler
//         mockedMarshaler := &MarshalerMock{
//             MarshalFunc: func(entry *Entry) ([]byte, error) {
// 	               panic("TODO: mock out the Marshal method")
//             },
//         }
//
//         // TODO: use mockedMarshaler in code that requires Marshaler
//         //       and then make assertions.
//
//     }
type MarshalerMock struct {
	// MarshalFunc mocks the Marshal method.
	MarshalFunc func(entry *Entry) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Marshal holds details about calls to the Marshal method.
		Marshal []struct {
			// Entry is the entry argument value.
			Entry *Entry
		}
	}
}

// Marshal calls MarshalFunc.
func (mock *MarshalerMock) Marshal(entry *Entry) ([]byte, error) {
	if mock.MarshalFunc == nil {
		panic("moq: MarshalerMock.MarshalFunc is nil but Marshaler.Marshal was just called")
	}
	callInfo := struct {
		Entry *Entry
	}{
		Entry: entry,
	}
	lockMarshalerMockMarshal.Lock()
	mock.calls.Marshal = append(mock.calls.Marshal, callInfo)
	lockMarshalerMockMarshal.Unlock()
	return mock.MarshalFunc(entry)
}

// MarshalCalls gets all the calls that were made to Marshal.
// Check the length with:
//     len(mockedMarshaler.MarshalCalls())
func (mock *MarshalerMock) MarshalCalls() []struct {
	Entry *Entry
} {
	var calls []struct {
		Entry *Entry
	}
	lockMarshalerMockMarshal.RLock()
	calls = mock.calls.Marshal
	lockMarshalerMockMarshal.RUnlock()
	return calls
}
